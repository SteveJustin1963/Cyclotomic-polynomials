% https://www.mycompiler.io/new/octave
% tested working ok

function main()
    % Test different values of n
    n_values = 3:10;
    products = zeros(size(n_values));
    sums = zeros(size(n_values));
    theoretical_products = zeros(size(n_values));
    theoretical_sums = zeros(size(n_values));
    
    % Store results in arrays
    for idx = 1:length(n_values)
        n = n_values(idx);
        [prod_val, sum_val] = calculate_distances(n);
        products(idx) = prod_val;
        sums(idx) = sum_val;
        theoretical_products(idx) = n^(n/2);
        theoretical_sums(idx) = (2*n^2/pi) * log(n);
    end
    
    % Print numerical results with better formatting
    fprintf('\nAnalysis of Distances Between Points on Unit Circle\n');
    fprintf('================================================\n\n');
    fprintf('%-3s %-15s %-15s %-15s %-15s\n', 'n', 'Product', 'Theory (n^n/2)', 'Sum', 'Theory (asymp)');
    fprintf('%-3s %-15s %-15s %-15s %-15s\n', '-', '-------', '-------------', '---', '-------------');
    for i = 1:length(n_values)
        fprintf('%-3d %-15.4f %-15.4f %-15.4f %-15.4f\n', ...
            n_values(i), products(i), theoretical_products(i), sums(i), theoretical_sums(i));
    end
    fprintf('\n');
    
    % Create three figures
    % Figure 1: Example with n=5
    figure(1);
    plot_points_and_lines(5);
    title('Example: n=5 points on unit circle');
    
    % Figure 2: Product and Sum plots
    figure(2);
    create_analysis_plots(n_values, products, sums, theoretical_products, theoretical_sums);
    
    % Figure 3: Circular plot for n=5
    figure(3);
    create_circular_plot(5);
    title('Circular Plot: Distances and Angles for n=5');
end

function create_analysis_plots(n_values, products, sums, theoretical_products, theoretical_sums)
    % Product plot
    subplot(2,1,1);
    plot(n_values, products, 'bo-', 'LineWidth', 2);
    hold on;
    plot(n_values, theoretical_products, 'r--', 'LineWidth', 2);
    title('Product of Distances');
    xlabel('Number of points (n)');
    ylabel('Product value');
    legend('Actual', 'Theoretical (n^{n/2})', 'Location', 'northwest');
    set(gca, 'YScale', 'log');
    grid on;
    box on;
    
    % Sum plot
    subplot(2,1,2);
    plot(n_values, sums, 'bo-', 'LineWidth', 2);
    hold on;
    plot(n_values, theoretical_sums, 'r--', 'LineWidth', 2);
    title('Sum of Distances');
    xlabel('Number of points (n)');
    ylabel('Sum value');
    legend('Actual', 'Asymptotic (2n^2/Ï€)log(n)', 'Location', 'northwest');
    grid on;
    box on;
    
    % Adjust figure size
    set(gcf, 'Position', [100, 100, 800, 800]);
end

function create_circular_plot(n)
    % Generate points
    theta = (2*pi/n) * (0:n-1);
    x = cos(theta);
    y = sin(theta);
    
    % Create polar plot
    t = linspace(0,2*pi,100);
    polar(t, ones(1,100), 'k--');
    hold on;
    
    % Plot connections with color based on distance
    max_dist = 0;
    distances = [];
    angles = [];
    
    for i = 1:n
        for j = i+1:n
            dx = x(i) - x(j);
            dy = y(i) - y(j);
            dist = sqrt(dx^2 + dy^2);
            max_dist = max(max_dist, dist);
            
            % Calculate angle between points
            angle = atan2(dy, dx);
            if angle < 0
                angle = angle + 2*pi;
            end
            
            distances = [distances, dist];
            angles = [angles, angle];
        end
    end
    
    % Plot distances as radial lines
    for i = 1:length(distances)
        color = distances(i)/max_dist; % Normalize distance for color
        polar([angles(i), angles(i)], [0, distances(i)], 'b-');
    end
    
    % Plot points
    for i = 1:n
        polar(theta(i), 1, 'ro');
        text(1.2*cos(theta(i)), 1.2*sin(theta(i)), sprintf('P%d', i), ...
            'FontSize', 12, 'HorizontalAlignment', 'center');
    end
    
    % Customize plot
    axis equal;
    grid on;
end

function [product_distances, sum_distances] = calculate_distances(n)
    % Generate points on unit circle
    theta = (2*pi/n) * (0:n-1);
    x = cos(theta);
    y = sin(theta);
    
    % Calculate all pairwise distances
    distances = zeros(n*(n-1)/2, 1);
    idx = 1;
    for i = 1:n
        for j = i+1:n
            % Calculate Euclidean distance
            dx = x(i) - x(j);
            dy = y(i) - y(j);
            distances(idx) = sqrt(dx^2 + dy^2);
            idx = idx + 1;
        end
    end
    
    % Calculate product and sum
    product_distances = prod(distances);
    sum_distances = sum(distances);
end

function plot_points_and_lines(n)
    % Generate points
    theta = (2*pi/n) * (0:n-1);
    x = cos(theta);
    y = sin(theta);
    
    % Plot unit circle
    t = linspace(0, 2*pi, 100);
    plot(cos(t), sin(t), 'k--');
    hold on;
    
    % Plot points and lines
    for i = 1:n
        for j = i+1:n
            plot([x(i) x(j)], [y(i) y(j)], 'b-', 'LineWidth', 0.5);
        end
    end
    
    % Plot points on top
    plot(x, y, 'ro', 'MarkerFaceColor', 'r', 'MarkerSize', 8);
    
    axis equal;
    grid on;
    xlabel('x');
    ylabel('y');
    legend('Unit Circle', 'Points', 'Location', 'northeast');
    
    % Add point labels
    for i = 1:n
        angle = theta(i);
        label_offset = 0.15;
        text(cos(angle)*(1+label_offset), sin(angle)*(1+label_offset), ...
            sprintf('P%d', i), 'FontSize', 12, 'HorizontalAlignment', 'center');
    end
    
    axis([-1.3 1.3 -1.3 1.3]);
    box on;
end
